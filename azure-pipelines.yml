# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

pool:
  vmImage: 'Ubuntu-16.04'

variables:
  buildConfiguration: 'Release'

steps:
- task: UseDotNet@2
  displayName: 'Use dotnet sdk 3.x'
  inputs:
    version: 3.x

- script: dotnet build --configuration $(buildConfiguration)
  displayName: 'dotnet build $(buildConfiguration)'

# Run all tests with "/p:CollectCoverage=true /p:CoverletOutputFormat=cobertura" to generate the code coverage file
- task: DotNetCoreCLI@2
  displayName: dotnet test
  inputs:
    command: test
    arguments: '--configuration $(BuildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura'
    projects: 'tests/**/*.csproj'
    nobuild: true

#- task: Palmmedia.reportgenerator.reportgenerator-build-release-task.reportgenerator@4
#  displayName: ReportGenerator
#  inputs:
#    reports: '$(Build.SourcesDirectory)/tests/**/coverage.cobertura.xml'
#    targetdir: '$(Build.SourcesDirectory)/CodeCoverage'
#    reporttypes: 'HtmlInline_AzurePipelines;Cobertura;Badges'
#    assemblyfilters: '-xunit*'

# Publish the code coverage result (summary and web site)
# The summary allows to view the coverage percentage in the summary tab
# The web site allows to view which lines are covered directly in Azure Pipeline
#- task: PublishCodeCoverageResults@1
#  displayName: 'Publish code coverage'
#  inputs:
#    codeCoverageTool: Cobertura
#    summaryFileLocation: '$(Build.SourcesDirectory)/CodeCoverage/Cobertura.xml'
#    reportDirectory: '$(Build.SourcesDirectory)/CodeCoverage'
